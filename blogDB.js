// Imports
import express from "express"
import bodyParser from "body-parser"
import { MongoClient } from "mongodb"
import { connectToDb, getDb } from "./database.js"

const DB_NAME = "lab9"
const MONGODB_URI = "mongodb://localhost:37017/blogDB.js"
const COLLECTION_NAME = "posts"
let postCount = 4
let commentCount = 8
let client = new MongoClient(`${MONGODB_URI}`)

// Variables
const app = express()
const PORT = 3000
app.use(express.urlencoded({ extended: true }))

// Listening on the PORT
app.listen(PORT, () => {
  console.log(`The server is running on port ${PORT}.`)
}) 

// Parses the text input from Postman
app.use(bodyParser.json())

// Database Connection
let db = client.db()
connectToDb(()=>{
  if(!err){
    app.listen(PORT, () => {
      console.log(`the server is running on ${PORT}!`)
    })
    db = getDb()
  }
})

// 9-1 GET /posts : Returns the array of posts.
app.get("/posts", async (req, res) => {
    client = await MongoClient.connect(MONGODB_URI)
    const database = await client.db(DB_NAME)
    const collection = database.collection(COLLECTION_NAME)
    const posts = await collection.find().toArray()

    console.log(posts)
    res.send(posts)
})

// 9-2 GET /posts/[author] : Returns an array of posts by a given author 
// (assume author username is unique).
app.get("/posts/:author", async (req, res) => {
    const authorName = String(req.params.author)

    client = await MongoClient.connect(MONGODB_URI)
    const database = await client.db(DB_NAME) 
    const collection = database.collection(COLLECTION_NAME)

    const query = { author: {$regex: authorName, $options: "i"}}
    const authorPost = await collection.find(query).toArray()

    console.log(authorPost)
    res.send(authorPost)
})

// 9-3 GET /post/[postId]/ : Retrieves a single post object based on postId 
// (not **_id**, which is generated by MongoDB)
app.get("/post/:postId", async (req, res) => {
    const pId = String(req.params.postId)

    client = await MongoClient.connect(MONGODB_URI)
    const database = await client.db(DB_NAME) 
    const collection = database.collection(COLLECTION_NAME)

    const query = { postId: {$regex: pId, $options: "i"}}
    const idPost = await collection.find(query).toArray()

    console.log(idPost)
    res.send(idPost)

})

// 9-4 POST /post : Accepts a JSON object as the body of the request containing 
// all post fields and saves to the database.
app.post("/post", async (req, res) => {
    const reqPost = req.body
    console.log(reqPost)

    client = await MongoClient.connect(MONGODB_URI)
    const database = await client.db(DB_NAME) 
    const collection = database.collection(COLLECTION_NAME)

    const newPost = createPostObj(reqPost.title, reqPost.author, reqPost.date, reqPost.comments, reqPost.content)
    const add = await collection.insertOne(newPost)

    res.send(newPost)
})

// Constructs a new post object
function createPostObj (gTitle, gAuthor, gDate, gComments, gContent) {
  postCount++
  const newPostId = "p" + postCount.toString()

  const postObj = {
    title: gTitle,
    author: gAuthor,
    date: gDate,
    postId: newPostId,
    comment: gComments,
    content: gContent
  }
  return postObj
}

// 9-5 DELETE /post/[postId] : Removes the post from the database based on the 
// postId field.
app.delete("/post/:postId", async (req, res) => {
    console.log(req.params)
    const pId = String(req.params.postId)

    client = await MongoClient.connect(MONGODB_URI)
    const database = await client.db(DB_NAME) 
    const collection = database.collection(COLLECTION_NAME)

    const deletePost = collection.deleteOne({ postId: pId})
    res.send("Post Deleted: " + pId)
})

// 9-6 POST /post/[postId]/comment : Adds a comment to the end of the post and 
// returns the commentId
app.post("/post/:postId/comment", async (req, res) => {
    console.log(req.params)
    const pId = String(req.params.postId)
    const reqPost = req.body
    console.log(reqPost)

    client = await MongoClient.connect(MONGODB_URI)
    const database = await client.db(DB_NAME) 
    const collection = database.collection(COLLECTION_NAME)
    
    const newComment = createComment(reqPost.author, reqPost.date, reqPost.content)
    const findPost = await collection.updateOne({ "postId": {$regex: pId, $options: "i"}}, {$push: { "comments": newComment}})

    const commentId = "c" + commentCount.toString()
    res.send("New Comment: " + commentId + " added to post " + pId)
})

function createComment (gAuthor, gDate, gContent) {
  commentCount++
  const newCId = "c" + commentCount.toString()

  const commentObj = {
    author: gAuthor,
    date: gDate,
    commentId: newCId,
    content: gContent
  }
  return commentObj
}

// 9-7 GET /post/[postId]/comments : Returns all comments associated with 
// a given postId
app.get("/post/:postId/comments", async (req, res) => {
    console.log(req.params)
    const pId = String(req.params.postId)

    client = await MongoClient.connect(MONGODB_URI)
    const database = await client.db(DB_NAME) 
    const collection = database.collection(COLLECTION_NAME)

    const query = { postId: {$regex: pId, $options: "i"}}
    const findComments = await collection.find(query).toArray()

    console.log(findComments[0].comments)
    res.send(findComments[0].comments)
})

// 9-8 DELETE /post/[postId]/comment/[commentId] : Deletes the comment with the 
// provided commentId on the post with the postId
app.delete("/post/:postId/comment/:commentId", async (req, res) => {
    console.log(req.params)
    const pId = String(req.params.postId)
    const cId = String(req.params.commentId)

    client = await MongoClient.connect(MONGODB_URI)
    const database = await client.db(DB_NAME) 
    const collection = database.collection(COLLECTION_NAME)

    const query = { commentId: {$regex: cId, $options: "i"}}
    const findPost = await collection.updateOne({ "postId": {$regex: pId, $options: "i"}}, {$pull: { "comments": query}})

    res.send("Comment Deleted: " + cId + " from post " + pId)
})
