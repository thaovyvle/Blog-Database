// Imports
import express from "express"
import bodyParser from "body-parser"
import mysql from "mysql2"
import { Sequelize } from "sequelize"

// Variables
const app = express()
const PORT = 3000
let postCount = 3
let commentCount = 6
app.use(express.urlencoded({ extended: true }))

// Create Database Connection
const db = mysql.createConnection({
    host: "localhost",
    port: 3406,
    user: "root",
    password: "mypassword",
    database: "posts"
})

// Connect Database
db.connect((err) => {
    if (err) {
        console.log(err)
        throw err
    }
    console.log("MySQL Connected.")
})

// Listening on the PORT
app.listen(PORT, () => {
  console.log(`The server is running on port ${PORT}.`)
}) 

// Parses the text input from Postman
app.use(bodyParser.json())

// 10-2.1 GET /posts : Returns the array of posts.
app.get("/posts", (req, res) => {
    let sql = 'SELECT post.title, post.author, post.date, post.postId, post.content, post.comments FROM post'
    let query = db.query(sql, (err, results) => {
        if(err) throw err
        console.log(results)
        res.send(results)
    }) 
})

// 10-2.2 GET /posts/[author] : Returns an array of posts by a given author (assume author username is unique).
app.get("/posts/:author", (req, res) => {
    const authorName = String(req.params.author)
    let sql = `SELECT post.title, post.author, post.date, post.postId, post.content, post.comments FROM post WHERE author LIKE '${authorName}'`
    let query = db.query(sql, (err, results) => {
        if(err) throw err
        console.log(results)
        res.send(results)
    })
})
// 10-2.3 GET /post/[postId]/ : Retrieves a single post object based on postId (not **_id**, which is generated by MySQL)
app.get("/post/:postId", (req, res) => {
    const pId = String(req.params.postId)
    let sql = `SELECT post.title, post.author, post.date, post.postId, post.content, post.comments FROM post WHERE postId LIKE '${pId}'`
    let query = db.query(sql, (err, results) => {
        if(err) throw err
        console.log(results)
        res.send(results)
    })
})

// 10-2.4 POST /post : Accepts a JSON object as the body of the request containing all post fields and saves to the database.
app.post("/post", (req, res) => {
    const reqPost = req.body
    let newPost = createPostObj(reqPost.title, reqPost.author, reqPost.date, reqPost.content)

    let sql = 'INSERT INTO post SET ?'
    let query = db.query(sql, newPost, (err, results) => {
        if(err) throw err
        res.send("Post added!")
    })
})
// Constructs a new post object
function createPostObj (gTitle, gAuthor, gDate, gContent) {
  postCount++
  const newPostId = "p" + postCount.toString()

  const postObj = {
    title: gTitle,
    author: gAuthor,
    date: gDate,
    postId: newPostId,
    content: gContent,
  }
  return postObj
}

// 10-2.5 DELETE /post/[postId] : Removes the post from the database based on the postId field.
app.delete("/post/:postId", (req, res) => {
    const pId = String(req.params.postId)
    let sql = `DELETE FROM post WHERE postId LIKE '${pId}'`
    let query = db.query(sql, (err, results) => {
        if(err) throw err
        console.log("Post Deleted: " + pId)
        res.send("Post Deleted: " + pId)
    })
})

// 10-2.6 POST /post/[postId]/comment : Adds a comment to the end of the post and returns the commentId
app.post("/post/:postId/comment", (req, res) => {
    const pId = String(req.params.postId)
    const reqPost = req.body
    console.log(reqPost)

    const newComment = createComment(reqPost.author, reqPost.date, reqPost.content, pId)
    const commentId = "c" + commentCount.toString()
    let sql = 'INSERT INTO comments SET ?'
    let query = db.query(sql, newComment, (err, results) => {
        if(err) throw err
        res.send("New Comment: " + commentId + " added to post " + pId)
    })

})
function createComment (gAuthor, gDate, gContent, pId) {
  commentCount++
  const newCId = "c" + commentCount.toString()

  const commentObj = {
    author: gAuthor,
    date: gDate,
    commentId: newCId,
    content: gContent,
    postId: pId
  }
  return commentObj
}
// 10-2.7 GET /post/[postId]/comments : Returns all comments associated with a given postId
app.get("/post/:postId/comments", (req, res) => {
    const pId = String(req.params.postId)

    let sql = `SELECT comments.author, comments.date, comments.commentId, comments.content FROM comments WHERE postId LIKE '${pId}'`
    let query = db.query(sql, (err, results) => {
        if(err) throw err
        console.log(results)
        res.send(results)
    })
})

// 10-2.8 DELETE /post/[postId]/comment/[commentId] : Deletes the comment with the provided commentId on the post with the postId
app.delete("/post/:postId/comment/:commentId", (req, res) => {
    const pId = String(req.params.postId)
    const cId = String(req.params.commentId)

    let sql = `DELETE FROM comments WHERE commentId LIKE '${cId}'`
    let query = db.query(sql, (err, results) => {
        if(err) throw err
        res.send("Comment Deleted: " + cId + " from post " + pId)
    })
})